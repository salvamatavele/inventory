// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Supplier {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

enum ProductStatus {
  GOOD
  REASONABLE
  POOR
  DAMAGED
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  sku         String    @unique
  price       Float
  quantity    Int       @default(0)
  minQuantity Int       @default(5)
  status      ProductStatus @default(GOOD)
  categoryId  String
  supplierId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  supplier    Supplier     @relation(fields: [supplierId], references: [id])
  transactions TransactionItem[]
}

model Transaction {
  id          String    @id @default(cuid())
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  userId      String
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  items       TransactionItem[]
}

model TransactionItem {
  id            String    @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  price         Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id])
}

enum TransactionType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}
